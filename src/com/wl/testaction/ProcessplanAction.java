/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wl.testaction;

import java.io.UnsupportedEncodingException;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.wl.forms.ProcessPlan;
import com.wl.tools.Null_change;
import com.wl.tools.Sqlhelper;

public class ProcessplanAction extends DispatchAction {

	public ActionForward processplan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		System.out.println("����processplan action�����Ѿ����������Խ��б����ˣ���");
		
		String orderID=request.getParameter("orderID").replace("null","");
		System.out.println("orderID=="+request.getParameter("orderID"));
	    String productId=request.getParameter("productId").replace("null","");
	    String issueid=request.getParameter("issueid").replace("null","");
	    int planid= Integer.parseInt(request.getParameter("planid"));
	    String itemid=request.getParameter("itemid").replace("null","");
	    String processid=request.getParameter("processid").replace("null","");
	    int processplanid= Integer.parseInt(request.getParameter("processplanid"));
	    String qualityid=request.getParameter("qualityid").replace("null","");
	    String barcode=request.getParameter("barcode").replace("null","");
	    String levelid=request.getParameter("levelid").replace("null","");
	    String fatheritemid=request.getParameter("fatheritemid").replace("null","");
	    int num= Integer.parseInt(request.getParameter("num"));
	    String starttime=request.getParameter("starttime").replace("null","");
	    String endtime=request.getParameter("endtime").replace("null","");
	    String processstate=request.getParameter("processstate").replace("null","");
	    String idcancle=request.getParameter("idcancle").replace("null","");
	    int finishnum= Integer.parseInt(request.getParameter("finishnum"));
	    String depatchpro=request.getParameter("depatchpro").replace("null","");
	    int passnum= Integer.parseInt(request.getParameter("passnum").replace("null","")) ;
	    int failurenum= Integer.parseInt(request.getParameter("failurenum"));
	    String isco=request.getParameter("isco").replace("null","");
	    String deptid=request.getParameter("deptid").replace("null","");
	    String workcore=request.getParameter("workcore").replace("null","");
	    //String receivetime=request.getParameter("receivetime").replace("null","");
	    String isreceive=request.getParameter("isreceive").replace("null","");
	    String reportstatus=request.getParameter("reportstatus").replace("null","");
	    String jigstatus=request.getParameter("jigstatus").replace("null","");
	    String rowstatus=request.getParameter("rowstatus").replace("null","");
	    String standardstatus=request.getParameter("standardstatus").replace("null","");
	    int shelflife= Integer.parseInt(request.getParameter("shelflife"));
	    String processplana=request.getParameter("processplana").replace("null","");
	    String aonouse=request.getParameter("aonouse").replace("null","");
	    String processplanb=request.getParameter("processplanb").replace("null","");
	    //String guaqitime=request.getParameter("guaqitime").replace("null","");
	    String isguaqi=request.getParameter("isguaqi").replace("null","");
	    
	    String sql ="update process set ORDERID='"+orderID+"',EQUIPMENT_DRAWID='"+productId+"',ISSUE_NUM='"+issueid+"',PLAN_ID='"+planid+"',ITEM_ID='"
	    +itemid+"',PROCESSPLANID='"+processplanid+"',QUALITY_ID='"+qualityid+"',BAR_CODE='"+barcode+"',LEVEL_ID='"+levelid+"',FATHER_ITEM_ID='"
	    +fatheritemid+"',NUM='"+num+"',START_TIME=to_date('"+starttime+"','yyyy-mm-dd,hh24:mi:ss'),END_TIME=to_date('"
	    +endtime+"','yyyy-mm-dd,hh24:mi:ss'),OPER_STATUS='"+processstate+"',CANCLESTATUS='"+idcancle+"',FINISHNUM='"+finishnum+"',DEPATCH_PRO='"
	    +depatchpro+"',PASS_NUM='"+passnum+"',FAILURE_NUM='"+failurenum+"',IS_CO='"+isco+"',DEPT_ID='"+deptid+"',WCID='"+workcore+"',IS_RECEIVE='"+isreceive+"',REPORT_STATUS='"+reportstatus+"',JIGSTATUS='"
	    +jigstatus+"',ROWSTATUS='"+rowstatus+"',STANDARDSTATUS='"+standardstatus+"',SHELFLIFE='"+shelflife+"',PROCESSPLAN_A='"+processplana+"',AO_NO_USE='"+aonouse+"',PROCESSPLAN_B='"
	    +processplanb+"',IS_POST='"+isguaqi+"' where OPER_ID='"+processid+"'";	    
    
	    System.out.println("sql===="+sql);
		
		try {
			Sqlhelper.executeUpdate(sql, null);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			System.out.println("���process_plan�쳣������");
			return mapping.findForward("err");
		}
		
		return mapping.findForward("ok");
	}
	
	public ActionForward Queryprocessplan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ProcessPlan processPlanbean = (ProcessPlan) form;// TODO Auto-generated method stub
//		String pid = request.getParameter("id").toString();
		String sql = "select *from process_plan";
//		String paras[]={pid};
		ResultSet rs=null;
		try {
			rs = (ResultSet) Sqlhelper.executeQuery(sql, null);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ArrayList<ProcessPlan> al = new ArrayList<ProcessPlan>();	
		try {
			while(rs.next()){
				ProcessPlan processPlan=new ProcessPlan();
				processPlan.setOrderID(rs.getString(1));
				processPlan.setProductId(rs.getString(2));
				processPlan.setIssueid(rs.getString(3));
				processPlan.setPlanid(rs.getInt(4));
				processPlan.setItemid(rs.getString(5));
				processPlan.setProcessid(rs.getString(6));
				processPlan.setProcessplanid(rs.getInt(7));
				processPlan.setQualityid(rs.getString(8));
				processPlan.setBarcode(rs.getString(9));
				processPlan.setLevelid(rs.getString(10));
				processPlan.setFatheritemid(rs.getString(11));
				processPlan.setNum(rs.getInt(12));
				processPlan.setStarttime(rs.getDate(13));
				processPlan.setEndtime(rs.getDate(14));
				processPlan.setProcessstate(rs.getString(15));
				processPlan.setIdcancle(rs.getString(16));
				processPlan.setFinishnum(rs.getInt(17));
				processPlan.setDepatchpro(rs.getString(18));
				processPlan.setPassnum(rs.getInt(19));
				processPlan.setFailurenum(rs.getInt(20));
				processPlan.setIsco(rs.getString(21));
				processPlan.setDeptid(rs.getString(22));
				processPlan.setWorkcore(rs.getString(23));
				processPlan.setReceivetime(rs.getDate(24));
				processPlan.setIsreceive(rs.getString(25));
				processPlan.setReportstatus(rs.getString(26));
				processPlan.setJigstatus(rs.getString(27));
				processPlan.setRowstatus(rs.getString(28));
				processPlan.setStandardstatus(rs.getString(29));
				processPlan.setShelflife(rs.getInt(30));
				processPlan.setProcessplana(rs.getString(31));
				processPlan.setAonouse(rs.getString(32));
				processPlan.setProcessplanb(rs.getString(33));
				processPlan.setGuaqitime(rs.getDate(34));
				processPlan.setIsguaqi(rs.getString(35));
				al.add(processPlan);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("processPlanת����arraylist��������");
		} finally{
			try {
				if(rs!=null){
					rs.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		System.out.println("����processPlan query���Ѿ�����");

		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("�ַ�ת���쳣������");
		}
		request.setAttribute("processPlan", al);
		return mapping.findForward("processplanList");
	}
	
	
	
	
	/*
	 * 查看单道工序的详细情况！！！
	 * */
	public ActionForward QueryprocessplanByID(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String sql=null;
		
		ProcessPlan processPlanbean = (ProcessPlan) form;// TODO Auto-generated method stub
//		String pid = request.getParameter("id").toString();
		String id = request.getParameter("id").toString();
		String ispart=request.getParameter("part");
		if("yes".equals(ispart)){
			sql = "select *from process_plan where item_id='"+id+"'";
		}
		if("no".equals(ispart)){
			sql = "select *from process_plan where OPER_ID='"+id+"'";
		}
		System.out.println("sql=="+sql);
//		String paras[]={pid};
		ResultSet rs=null;
		try {
			rs = (ResultSet) Sqlhelper.executeQuery(sql, null);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ArrayList<ProcessPlan> al = new ArrayList<ProcessPlan>();	
		try {
			Null_change null_change=null;
			while(rs.next()){
				ProcessPlan processPlan=new ProcessPlan();
				processPlan.setOrderID(rs.getString(1));
				processPlan.setProductId(rs.getString(2));
				System.out.println("rs.getString(2)=="+rs.getString(2));
//				System.out.println("Null_change.nulltoString(rs.getString(2))"+null_change.nulltoString(rs.getString(1)));
				processPlan.setIssueid(rs.getString(3));
				processPlan.setPlanid(rs.getInt(4));
				processPlan.setItemid(rs.getString(5));
				processPlan.setProcessid(rs.getString(6));
				processPlan.setProcessplanid(rs.getInt(7));
				processPlan.setQualityid(rs.getString(8));
				processPlan.setBarcode(rs.getString(9));
				processPlan.setLevelid(rs.getString(10));
				processPlan.setFatheritemid(rs.getString(11));
				processPlan.setNum(rs.getInt(12));
				processPlan.setStarttime(rs.getDate(13));
				processPlan.setEndtime(rs.getDate(14));
				processPlan.setProcessstate(rs.getString(15));
				processPlan.setIdcancle(rs.getString(16));
				processPlan.setFinishnum(rs.getInt(17));
				processPlan.setDepatchpro(rs.getString(18));
				processPlan.setPassnum(rs.getInt(19));
				processPlan.setFailurenum(rs.getInt(20));
				processPlan.setIsco(rs.getString(21));
				processPlan.setDeptid(rs.getString(22));
				processPlan.setWorkcore(rs.getString(23));
				processPlan.setReceivetime(rs.getDate(24));
				processPlan.setIsreceive(rs.getString(25));
				processPlan.setReportstatus(rs.getString(26));
				processPlan.setJigstatus(rs.getString(27));
				processPlan.setRowstatus(rs.getString(28));
				processPlan.setStandardstatus(rs.getString(29));
				processPlan.setShelflife(rs.getInt(30));
				processPlan.setProcessplana(rs.getString(31));
				processPlan.setAonouse(rs.getString(32));
				processPlan.setProcessplanb(rs.getString(33));
				processPlan.setGuaqitime(rs.getDate(34));
				processPlan.setIsguaqi(rs.getString(35));
				al.add(processPlan);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("processPlanת����arraylist��������");
		} finally{
			try {
				if(rs!=null){
					rs.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("����processPlan query���Ѿ�����");
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("�ַ�ת���쳣������");
		}
		request.setAttribute("processPlan", al);
		return mapping.findForward("processplanList");
	}



	/**
	 * 编制工序计划 的action
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward newprocessplan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println("newprocessplan已经进入了函数体！！！！");
		Date part_starttime = null;
		Date part_finishtime = null;
		int part_status = 0;
		int process_num = 0;
		int part_num = 0;
		
		String id = request.getParameter("id").toString();
		String orderId = request.getParameter("orderId");
		String productId = request.getParameter("productId");
		System.out.println(orderId + "  " + productId);
		//String sql = "select *from partplan where PRODUCT_ID='"+id+"'";//查询零件计划
		String sql = "select *from partplan where item_id='"+id+"'  and order_id = '" +orderId +"'";
		System.out.println("sql=="+sql); 
		
		//查询此零件对应的工序,FO_OPERID工序编号，这个编号中有是第几道工序,此处OPER_TIME代表此道工序的总共加工时间，EQUIPCODE设备编号，
		String sql2 = "select FO_OPERID,OPER_TIME,EQUIPCODE from fo_detail where item_id ='"
			+id+"' and isinuse='1' order by fo_operid desc";
		System.out.println("sql2=="+sql2);
		
		ResultSet lingjian_rs=null;
		try {
			lingjian_rs = (ResultSet) Sqlhelper.executeQuery(sql, null);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}//零件计划表
		ResultSet process_rs=null;
		try {
			process_rs = (ResultSet) Sqlhelper.executeQuery(sql2, null);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ArrayList<ProcessPlan> al = new ArrayList<ProcessPlan>();	
		try {
			lingjian_rs.next();
			part_starttime = lingjian_rs.getDate("PLAN_BGTIME");       //开始时间
			part_finishtime = lingjian_rs.getDate("PLAN_EDTIME");      //结束时间
			part_status = lingjian_rs.getInt("PART_STATUS");           //零件状态
			part_num = lingjian_rs.getInt("PART_NUM");                 //零件数量
			process_num = lingjian_rs.getInt("PARTPLAN_A");          
			float start=0;
			float end=0;
			
			while(process_rs.next()){
				
				float duration;                       //存储的是小时数据，小时小时小时！！！！
				String equipment = null;
				String worker =null;
				
				int processplan_sequence = 0;       //第一道工序在数据库中存储为5，第二道为10....
				//int processplan_num =process_num;
				int processplan_num = part_num;
				Date processplan_starttime = null;
				Date processplan_finishtime = null;
				String processplan_id = null;       //如何获得工序的ID号呢？？
				
				processplan_id = process_rs.getString("FO_OPERID");
				processplan_id = processplan_id.replaceAll(id, "");
				
				duration = process_rs.getFloat("OPER_TIME");
				equipment = process_rs.getString("EQUIPCODE");
				//worker = process_rs.getString("PROCESSPLAN_B");
				
				end=start;
				start+=duration*part_num;
				
				//processplan_sequence = process_rs.getInt("PLAN_ID");
                //这个日期转化是绝对的技术核心！！！！！！
				String insert_processplan_sql = 
				"insert into process_plan (ITEM_ID,OPER_ID,NUM,wcid,START_TIME,END_TIME,orderid,product_id) values('"
				+id+"','"
				+processplan_id+"','"
				+processplan_num+"','"
				+equipment+"',"
				+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+start+"/24," 
				+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+end+"/24," +
				"'"+orderId +"',"+
				"'"+productId +"')";
				
				String copy_insert_processplan_sql = 
					"insert into process_temp (ITEM_ID,OPER_ID,NUM,wcid,START_TIME,END_TIME,orderid,product_id) values('"
					+id+"','"
					+processplan_id+"','"
					+processplan_num+"','"
					+equipment+"',"
					+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+start+"/24," 
					+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+end+"/24," +
					"'"+orderId +"',"+
					"'"+productId +"')";
				
				System.out.println("insert_processplan_sql=="+insert_processplan_sql);
				System.out.println("copy_insert_processplan_sql=="+copy_insert_processplan_sql);

				Sqlhelper.executeUpdate_noclose(insert_processplan_sql, null); //重大错误隐患！！！！-->>结果集没有及时关闭！！！
				Sqlhelper.executeUpdate_noclose(copy_insert_processplan_sql, null);
			}
	
		} catch (Exception e) {
			e.printStackTrace();

			System.out.println("Processplanaction 中的processplan出现异常！！！！");
			return mapping.findForward("alreadyhere");
		} finally{
			try {
				if (process_rs!=null) {
					process_rs.close();
				}
				if (lingjian_rs!=null) {
					lingjian_rs.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("字符转化异常！！！");
		}
		//request.setAttribute("processPlan", al);
		return mapping.findForward("ok");
//		return null;
	}
	
	
	
	/*
	 * 批量制定工序计划
	 */

	public ActionForward NL(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Date part_starttime = null;
		Date part_finishtime = null;
		int part_status = 0;
		int process_num = 0;
		int part_num = 0;

		String id = request.getParameter("id").toString();
		System.out.println("传进来的node字符串是=="+id);
		String[] idList = null;
		idList = id.split(",");
		for(int i=0;i<idList.length;i++){
			
			System.out.println("idList["+i+"]=="+idList[i]);
			
			String sql = "select *from partplan where item_id='"+idList[i]+"'";//查询零件计划
			System.out.println("sql=="+sql);
			
			//String sql2 = "select OPER_ID,DURATION,PROCESSPLAN_A,PROCESSPLAN_B,PLAN_ID from process where EQUIPMENT_DRAWID='"+idList[i]+"' order by PLAN_ID desc";//查询工序表
			
			String sql2 = "select FO_OPERID,OPER_TIME,EQUIPCODE from fo_detail where item_id ='"+idList[i]+"' and isinuse='1' order by fo_operid desc";
			System.out.println("sql2=="+sql2);
				
			ResultSet lingjian_rs=null;
			try {
				lingjian_rs = (ResultSet) Sqlhelper.executeQuery(sql, null);
			} catch (SQLException e2) {
				e2.printStackTrace();
			}//零件计划表
			ResultSet process_rs=null;
			try {
				process_rs = (ResultSet) Sqlhelper.executeQuery(sql2, null);
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
			ArrayList<ProcessPlan> al = new ArrayList<ProcessPlan>();	
			try {
				lingjian_rs.next();
				part_starttime = lingjian_rs.getDate("PLAN_BGTIME");
				part_finishtime = lingjian_rs.getDate("PLAN_EDTIME");
				part_status = lingjian_rs.getInt("PART_STATUS");
				part_num = lingjian_rs.getInt("PART_NUM");
				process_num = lingjian_rs.getInt("PARTPLAN_A");
				lingjian_rs.close();
				float start=0;
				float end=0;
				System.out.println("=========================================");
				while(process_rs.next()){
					float duration;                      //存储的是小时数据，小时小时小时！！！！
					String equipment = null;
					String worker =null;
					
					int processplan_sequence = 0;      //第一道工序在数据库中存储为1，第二道为2....
					int processplan_num =process_num;
					Date processplan_starttime = null;
					Date processplan_finishtime = null;
					String processplan_id = null;      //如何获得工序的ID号呢？？
					
					processplan_id = process_rs.getString("FO_OPERID");
					duration = process_rs.getFloat("OPER_TIME");
					equipment = process_rs.getString("EQUIPCODE");
					//worker = process_rs.getString("PROCESSPLAN_B");
					
					end=start;
					start+=duration*part_num;
					
//					processplan_sequence = process_rs.getInt("PLAN_ID");
	                //这个日期转化是绝对的技术核心！！！！！！
//					String insert_processplan_sql = 
//					"insert into process_plan (PROCESSPLAN_A,PROCESSPLAN_B,EQUIPMENT_DRAWID,OPER_ID,NUM,START_TIME,END_TIME) values('"
//					+equipment+"','"+worker+"','"+idList[i]+"','"+processplan_id+"','"+processplan_num+"',to_date('"
//					+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+start+"/24,to_date('"
//					+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+end+"/24)";
					
					String insert_processplan_sql = 
					"insert into process_plan (ITEM_ID,OPER_ID,NUM,PROCESSPLAN_A,START_TIME,END_TIME) values('"
					+idList[i]+"','"
					+processplan_id+"','"
					+processplan_num+"','"
					+equipment+"',"
					+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+start+"/24," 
					+"to_date('"+part_finishtime+"','yyyy-mm-dd HH24:MI:SS')-"+end+"/24)";
					
					
					System.out.println("insert_processplan_sql=="+insert_processplan_sql);
	
					Sqlhelper.executeUpdate_noclose(insert_processplan_sql, null); //重大错误隐患！！！！-->>结果集没有及时关闭！！！
				}
				
				
			} catch (Exception e) {
				e.printStackTrace();
	
				System.out.println("Processplanaction 中保存processplan出现异常！！！！");
				return mapping.findForward("alreadyhere");
			}finally{
				  
			   try{
			     if(lingjian_rs!=null) {
			    	 lingjian_rs.close();
			          }
			     if(process_rs!=null){
			    	 process_rs.close();
			        }
			     }catch (Exception e1) {
				   e1.printStackTrace();
			     }
			  }
		
		}
	
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			System.out.println("字符转化异常！！！");
		}

		return mapping.findForward("ok");

	}
}
